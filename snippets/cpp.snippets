# A valid snippet should starts with:
# snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet bits "Include bits/stdc++.h file" bA
#include <bits/stdc++.h>
endsnippet

snippet fileio "C++ File I/O" bA
ios_base::sync_with_stdio(0);
cin.tie(0);
freopen("$1.in", "r", stdin);
freopen("$1.out", "w", stdout);
$0
endsnippet

snippet std "Using namespace std" bA
using namespace std;
endsnippet

snippet main "Create main function" bA
int main(int argc, char* argv[])
{
	$0

	return 0;
}
endsnippet

snippet typell "Shortened version of long long" bA
typedef long long ll;
endsnippet

snippet fr\ "Traditional for loop" wA
for (int $1 = $2; $1 < $3; $1++) {
  $0
}
endsnippet

snippet fre\ "For each loop" wA
for (auto &$1 : $2) {
  $0
}
endsnippet

snippet reseq "Read in a sequence of values into a container" wA
for (auto &e : $1) cin >> e;$0
endsnippet

snippet prseq "Printing out the elements of a container" wA
for (auto &e : $1) cout << e$0
endsnippet 

snippet pb "push_back() function for vector" wA
push_back($1);$0
endsnippet

snippet ff "first attribute of a pair" wA
first
endsnippet

snippet ss "second attribute of a pair" wA
second
endsnippet

snippet sz "size function" wA
size()
endsnippet

snippet bgnd "begin() and end()" wA
$1.begin(), $1.end()
endsnippet

snippet lb "lower_bound() function for set, multiset, etc." w
lower_bound($1)$0
endsnippet

snippet ub "upper_bound() function for set, vector, etc." w
upper_bound($1)$0
endsnippet

snippet 'dbg\((.*)\);' "Debugging sequence of values" rbA
`!p snip.rv = "cerr << " + "".join([val.strip() + " << ' ' << " for val in match.group(1).split(',')]) + "endl;"`$0
endsnippet

snippet 'test "bruh" rA
`!p snip.rv = "HIIII"`
endsnippet

snippet dbgarr "Debugging array by printing all values to stdcerr" bA
for (auto &e : $1) cerr << e << " "; cerr << endl;
endsnippet
